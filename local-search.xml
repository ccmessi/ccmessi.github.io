<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>节流与防抖</title>
    <link href="/2021/10/29/%E8%8A%82%E6%B5%81%E4%B8%8E%E9%98%B2%E6%8A%96/"/>
    <url>/2021/10/29/%E8%8A%82%E6%B5%81%E4%B8%8E%E9%98%B2%E6%8A%96/</url>
    
    <content type="html"><![CDATA[<h3 id="节流函数"><a href="#节流函数" class="headerlink" title="节流函数"></a>节流函数</h3><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">//throttle本质也是一个定时器，在第一次触发事件的时候，开启定时器，在定时器执行完毕之前，系统会锁住，新触发的事件都不会执行；定时器执行完毕之后，销毁定时器，系统开放，接受新的事件。</span><br><span class="hljs-comment">//基本函数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Throttle</span>(<span class="hljs-params">func, delay</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> pre = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(); <span class="hljs-comment">//设置初始时间</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> now = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<span class="hljs-comment">//设置当前时间</span><br>    <span class="hljs-keyword">let</span> context = <span class="hljs-built_in">this</span>;<br>    <span class="hljs-keyword">let</span> args = <span class="hljs-built_in">arguments</span>;<br>    <span class="hljs-keyword">if</span> (now - pre &gt; delay) &#123;<br>      func.apply(context, args);<br>      pre = now<br>    &#125;<br>  &#125;<br></code></pre></div></td></tr></table></figure><p>​        两个参数，第一个参数就是执行的函数，第二个参数是延迟的时间，用节流的方式，可以保证在一段时间内，只有第一次执行是生效的直到超过了设定的时间段，才有机会执行下一次，大大的降低了原有函数的执行频率。</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">//进阶节流函数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">throttle</span>(<span class="hljs-params">func, wait, options</span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> timeout, context, args, result;<br>  <span class="hljs-keyword">var</span> previous = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">if</span> (!options) options = &#123;&#125;;<br> <br>  <span class="hljs-keyword">var</span> later = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    previous = options.leading === <span class="hljs-literal">false</span>? <span class="hljs-number">0</span>: <span class="hljs-built_in">Date</span>.now(); <br>    timeout = <span class="hljs-literal">null</span>;<br>    result = func.apply(context, args);<br>  &#125;;<br> <br>  <span class="hljs-keyword">var</span> throttled = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> now = <span class="hljs-built_in">Date</span>.now();<br>    <span class="hljs-keyword">if</span> (!previous &amp;&amp; options.leading === <span class="hljs-literal">false</span>) previous = now;<br>    <span class="hljs-keyword">var</span> remaining = wait - (now - previous);<br>  context = <span class="hljs-built_in">this</span>;<br>    args = <span class="hljs-built_in">arguments</span>;<br>    <span class="hljs-keyword">if</span> (remaining &lt;= <span class="hljs-number">0</span> || remaining &gt; wait) &#123;<br>      <span class="hljs-keyword">if</span> (timeout) &#123;<br>        <span class="hljs-built_in">clearTimeout</span>(timeout);<br>        timeout = <span class="hljs-literal">null</span>;<br>      &#125;<br>      previous = now;<br>      result = func.apply(context, args);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!timeout &amp;&amp; options.trailing !== <span class="hljs-literal">false</span>) &#123;<br>      timeout = <span class="hljs-built_in">setTimeout</span>(later, remaining);<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>  &#125;<br>  throttled.cancel = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">clearTimeout</span>(timeout);<br>    previous = <span class="hljs-number">0</span>;<br>    timeout = context = args = <span class="hljs-literal">null</span>;<br>  &#125;;<br>  <span class="hljs-keyword">return</span> throttled;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="防抖函数"><a href="#防抖函数" class="headerlink" title="防抖函数"></a>防抖函数</h3><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">//debounce本质上，是一个定时器setTimeout，在wait毫秒时间之后，执行传入的函数：</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">debounce</span>(<span class="hljs-params">func, wait, immediate</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> timeout, result;<br> <br>    <span class="hljs-keyword">var</span> debounced = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> context = <span class="hljs-built_in">this</span>;<br>  <span class="hljs-keyword">var</span> args = <span class="hljs-built_in">arguments</span>;<br>  <span class="hljs-keyword">if</span> (timeout) <span class="hljs-built_in">clearTimeout</span>(timeout);<br> <br>        <span class="hljs-keyword">var</span> later = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>           timeout = <span class="hljs-literal">null</span>;<br>           <span class="hljs-keyword">if</span> (!immediate) result = func.apply(context, args);<br>        &#125;;<br> <br> <br>        <span class="hljs-keyword">var</span> callNow = immediate &amp;&amp; !timeout;<br>        timeout = <span class="hljs-built_in">setTimeout</span>(later, wait);<br>        <span class="hljs-keyword">if</span> (callNow) result = func.apply(<span class="hljs-built_in">this</span>, args);<br> <br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>    debounced.cancel = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">clearTimeout</span>(timeout);<br>        timeout = <span class="hljs-literal">null</span>;<br>    &#125;;<br>    <span class="hljs-keyword">return</span> debounced;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>​        返回 <strong>function</strong> 函数的防反跳版本, 将延迟函数的执行(真正的执行)在函数最后一次调用时刻的 <strong>wait</strong> 毫秒之后. 对于必须在一些输入（多是一些用户操作）停止到达<em>之后</em>执行的行为有帮助。 例如: 渲染一个Markdown格式的评论预览, 当窗口停止改变大小之后重新计算布局, 等等.</p>]]></content>
    
    
    <categories>
      
      <category>-技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>-throttle&amp;debounce</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>axios</title>
    <link href="/2021/10/28/axios/"/>
    <url>/2021/10/28/axios/</url>
    
    <content type="html"><![CDATA[<h4 id="封装axios"><a href="#封装axios" class="headerlink" title="封装axios"></a>封装axios</h4><h5 id="1-请求地址以及超时时间"><a href="#1-请求地址以及超时时间" class="headerlink" title="1.请求地址以及超时时间"></a>1.请求地址以及超时时间</h5><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> service = axios.create(&#123;<br>  <span class="hljs-attr">baseURL</span>: <span class="hljs-string">&#x27;http://tomcat2-69.gis-data.cn:7080&#x27;</span>,<br>  <span class="hljs-comment">// 超时时间</span><br>  <span class="hljs-attr">timeout</span>: <span class="hljs-number">3000</span><br>&#125;);<br></code></pre></div></td></tr></table></figure><h5 id="2-设置请求拦截器"><a href="#2-设置请求拦截器" class="headerlink" title="2.设置请求拦截器"></a>2.设置请求拦截器</h5><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">service.interceptors.request.use(<span class="hljs-function"><span class="hljs-params">config</span> =&gt;</span> &#123;<br>  config.data = <span class="hljs-built_in">JSON</span>.stringify(config.data); <span class="hljs-comment">//数据转化,也可以使用qs转换</span><br>  config.headers = &#123;<br>    <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/json;charset=UTF-8&#x27;</span> <span class="hljs-comment">//配置请求头</span><br>  &#125;;<br>  <span class="hljs-keyword">return</span> config<br>&#125;, <span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;<br>  <span class="hljs-built_in">Promise</span>.reject(error)<br>&#125;);<br></code></pre></div></td></tr></table></figure><h5 id="3-设置响应拦截器"><a href="#3-设置响应拦截器" class="headerlink" title="3.设置响应拦截器"></a>3.设置响应拦截器</h5><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">service.interceptors.response.use(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;<br>  <span class="hljs-comment">// 接收到响应数据并成功后的一些共有的处理，关闭loading等</span><br><br>  <span class="hljs-keyword">return</span> response<br>&#125;, <span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;<br>  <span class="hljs-comment">/***** 接收到异常响应的处理开始 *****/</span><br>  <span class="hljs-keyword">if</span> (error &amp;&amp; error.response) &#123;<br>    <span class="hljs-comment">// 根据响应码具体处理</span><br>    <span class="hljs-keyword">switch</span> (error.response.status) &#123;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">400</span>:<br>        error.message = <span class="hljs-string">&#x27;错误请求&#x27;</span>;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">401</span>:<br>        error.message = <span class="hljs-string">&#x27;未授权，请重新登录&#x27;</span>;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">403</span>:<br>        error.message = <span class="hljs-string">&#x27;拒绝访问&#x27;</span>;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">404</span>:<br>        error.message = <span class="hljs-string">&#x27;请求错误,未找到该资源&#x27;</span>;<br>        <span class="hljs-built_in">window</span>.location.href = <span class="hljs-string">&quot;/NotFound&quot;</span>;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">405</span>:<br>        error.message = <span class="hljs-string">&#x27;请求方法未允许&#x27;</span>;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">408</span>:<br>        error.message = <span class="hljs-string">&#x27;请求超时&#x27;</span>;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">500</span>:<br>        error.message = <span class="hljs-string">&#x27;服务器端出错&#x27;</span>;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">501</span>:<br>        error.message = <span class="hljs-string">&#x27;网络未实现&#x27;</span>;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">502</span>:<br>        error.message = <span class="hljs-string">&#x27;网络错误&#x27;</span>;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">503</span>:<br>        error.message = <span class="hljs-string">&#x27;服务不可用&#x27;</span>;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">504</span>:<br>        error.message = <span class="hljs-string">&#x27;网络超时&#x27;</span>;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">505</span>:<br>        error.message = <span class="hljs-string">&#x27;http版本不支持该请求&#x27;</span>;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">default</span>:<br>        error.message = <span class="hljs-string">`连接错误<span class="hljs-subst">$&#123;error.response.status&#125;</span>`</span><br>    &#125;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// 超时处理</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">JSON</span>.stringify(error).includes(<span class="hljs-string">&#x27;timeout&#x27;</span>)) &#123;<br>      Message.error(<span class="hljs-string">&#x27;服务器响应超时，请刷新当前页&#x27;</span>)<br>    &#125;<br>    error.message = <span class="hljs-string">&#x27;连接服务器失败&#x27;</span><br>  &#125;<br></code></pre></div></td></tr></table></figure><h5 id="4-返回错误信息，处理结束，最后导出"><a href="#4-返回错误信息，处理结束，最后导出" class="headerlink" title="4.返回错误信息，处理结束，最后导出"></a>4.返回错误信息，处理结束，最后导出</h5><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"> Message.error(error.message);<br>  <span class="hljs-comment">/***** 处理结束 *****/</span><br>  <span class="hljs-comment">//如果不需要错误处理，以上的处理过程都可省略</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.resolve(error.response)<br>&#125;);<br><span class="hljs-comment">//导出</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> service<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>-技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>-axios</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cloud</title>
    <link href="/2021/10/28/cloud/"/>
    <url>/2021/10/28/cloud/</url>
    
    <content type="html"><![CDATA[<p>人生如戏,亦或是戏如人生。</p>]]></content>
    
    
    <categories>
      
      <category>-随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>-life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>promise</title>
    <link href="/2021/10/28/promise/"/>
    <url>/2021/10/28/promise/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">//异步加载</span><br><span class="hljs-built_in">this</span>.promise = Cesium.GeoJsonDataSource.load(<br>  <span class="hljs-string">&#x27; http://nginx-100.gis-data.cn:7080/learning/3/cq-boundary.geojson&#x27;</span>, &#123;<br>    <span class="hljs-attr">stroke</span>: Cesium.Color.BLUE,<br>    <span class="hljs-attr">fill</span>: Cesium.Color.RED,<br>    <span class="hljs-attr">strokeWidth</span>: <span class="hljs-number">8</span>,<br>  &#125;);<br><span class="hljs-built_in">this</span>.promise.then(<span class="hljs-function">(<span class="hljs-params">dataSource</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">this</span>.viewer.dataSources.add(dataSource);<br>  <span class="hljs-keyword">let</span> entities = dataSource.entities.values;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> entity <span class="hljs-keyword">of</span> entities) &#123;<br>    <span class="hljs-keyword">let</span> polyPositions = entity.polygon.hierarchy.getValue(Cesium.JulianDate.now()).positions;<br>    <span class="hljs-comment">// 方式一：</span><br>    <span class="hljs-comment">// let polyCenter = Cesium.BoundingSphere.fromPoints(polyPositions).center;</span><br>    <span class="hljs-comment">// polyCenter = Cesium.Ellipsoid.WGS84.scaleToGeodeticSurface(polyCenter);</span><br>    <span class="hljs-comment">// 方式二：</span><br>    <span class="hljs-keyword">let</span> center = [];<br>    <span class="hljs-keyword">let</span> a = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">let</span> b = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">let</span> c = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = <span class="hljs-number">0</span>; j &lt;= polyPositions.length - <span class="hljs-number">1</span>; j++) &#123;<br>      a += polyPositions[j].x;<br>      b += polyPositions[j].y;<br>      c += polyPositions[j].z<br>    &#125;<br>    center = [a / polyPositions.length, b / polyPositions.length, c / polyPositions.length + <span class="hljs-number">2000</span>];<br>    <span class="hljs-keyword">let</span> labelpostion = Cesium.Cartesian3.fromArray(center);<br>    <span class="hljs-comment">//方式三：暂未实现，后面会继续研究</span><br>    <span class="hljs-comment">// let cartographics = Cesium.Ellipsoid.WGS84.cartesianArrayToCartographicArray(polyPositions);</span><br>    <span class="hljs-comment">// let points = [];</span><br>    <span class="hljs-comment">// let center = [];</span><br>    <span class="hljs-comment">// let a = 0;</span><br>    <span class="hljs-comment">// for (let i = 0; i &lt;= cartographics.length - 1; i++) &#123;</span><br>    <span class="hljs-comment">//   let lat = Cesium.Math.toDegrees(cartographics[i].latitude);</span><br>    <span class="hljs-comment">//   let lng = Cesium.Math.toDegrees(cartographics[i].longitude);</span><br>    <span class="hljs-comment">//   a = cartographics[i].height;</span><br>    <span class="hljs-comment">//   points[i] = [lng, lat];</span><br>    <span class="hljs-comment">// &#125;</span><br>    <span class="hljs-comment">// let polygon = Turf.polygon([points]);</span><br>    <span class="hljs-comment">// let centroid = Turf.centroid(polygon);</span><br>    <span class="hljs-comment">// center = [centroid.geometry.coordinates[0], centroid.geometry.coordinates[1]];</span><br>    <span class="hljs-comment">// let labelpostion = Cesium.Cartesian3.fromDegreesArray(center);</span><br>    <span class="hljs-built_in">this</span>.viewer.entities.add(&#123;<br>      <span class="hljs-attr">position</span>: labelpostion,<br>      <span class="hljs-attr">label</span>: &#123;<br>        <span class="hljs-attr">font</span>: <span class="hljs-string">&#x27;24px sans-serif&#x27;</span>,<br>        <span class="hljs-attr">text</span>: entity.name,<br>        <span class="hljs-attr">scale</span>: <span class="hljs-number">0.5</span>,<br>        <span class="hljs-attr">horizontalOrigin</span>: Cesium.HorizontalOrigin.CENTER,<br>        <span class="hljs-attr">verticalOrigin</span>: Cesium.VerticalOrigin.BOTTOM,<br>        <span class="hljs-attr">fillColor</span>: Cesium.Color.CRIMSON,<br>        <span class="hljs-attr">showBackground</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">backgroundColor</span>: Cesium.Color.BEIGE,<br>      &#125;<br>    &#125;);<br>  &#125;<br>&#125;);<br></code></pre></div></td></tr></table></figure><p>promise这个类最基本的功能就是传入处理器函数executor。根据MDN上的解释：</p><blockquote><p>这个“处理器函数”接受两个函数——resolve 和 reject ——作为其参数。当异步任务顺利完成且返回结果值时，会调用 resolve 函数；而当异步任务失败且返回失败原因（通常是一个错误对象）时，会调用reject 函数。</p><p>promise中有三个状态：pending，fulfilled以及rejected。在上面这段程序中，使用this.$state来保存promise的状态。</p><p>而resolve和reject的函数定义当中，传入的参数res赋给this.$value，从而实现参数res的传递。</p><p>最后，调用executor，并把resolve和reject当做两个参数传递进去。如果这中间出现异常，我们会认为这是操作失败，从而调用reject函数。</p></blockquote><ul><li>在我的项目中，当执行cesium的Cesium.GeoJsonDataSource.load这个加载json格式的数据的函数时，会返回一个promise对象，此时promise对象resolve里储存的是entities实体数据集：它包括这个json数据的所有面的坐标数据，promise一般用.then方法获取resolve存储的数据，并且在then方法里的js都是异步进行的，在promise外面是获取不到这个数据的。</li></ul>]]></content>
    
    
    <categories>
      
      <category>-技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>-promise</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
